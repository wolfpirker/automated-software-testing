<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE NixNote-Export>
<nixnote-export version="2" exportType="export" application="NixNote" applicationVersion="2.x">
    <Note>
        <Guid>52741ade-dc5e-4a72-8f77-6ceede2a9760</Guid>
        <Title>Automated Software Testing, 3: first automated test</Title>
        <Content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM 'http://xml.evernote.com/pub/enml2.dtd'><en-note>
<br />
<br />
<ul>
<li>command line applications</li>
<li>to write simple blogs</li>
<li>integration, system, unit tests are covered</li>
</ul>
<div>#56: Setting up your project</div>
<div>
<ul>
<li>we need virtualenv, it might be already installed,
otherwise</li>
<ul>
<li>either use pip install&nbsp;</li>
<li>or on a linux you can use the provided package of your
distribution</li>
</ul>
<li>type in the directory were you start your project</li>
<ul>
<li><span style="background-color: rgb(255, 255, 0);">virtualenv
env --python=3.10</span></li>
<ul>
<li>instead of python=3.10 the instructor is using python 3.6</li>
</ul>
</ul>
<li>vm is in the directory where we are</li>
<ul>
<li>it is copying everything, libraries, python</li>
<li>reasoning: keep the version of libraries the same throughout
the development of your software</li>
</ul>
<li>and in another project you might need other version</li>
<ul>
<li>&nbsp;that is why we use <span style=
"background-color: rgb(255, 255, 0);">virtual
environments</span></li>
</ul>
<li>every project should have its own virtual environment</li>
<li>virtual environments are small</li>
<ul>
<li>even if you install hundreds of those, it should be ok</li>
</ul>
<li>actually our first project wouldn't need the virutalenv,
however it is good practice</li>
<li>in Pycharm you can add the python interpreter of the installed
virtualenvironment below</li>
<ul>
<li>Project Settings -&gt; Add Interpreter -&gt; Virutalenv
Environment -&gt; select Python binary</li>
</ul>
<li>we create a project blog (or folder blog and switch to that
folder, select the virtualenv etc.)</li>
<li><br /></li>
</ul>
<div><br /></div>
<div>#57: Important about the naming of test files</div>
<div>
<p>In this course, I name my test files using this
pattern:&nbsp;<code>*_test.py</code></p>
<p>For example, <code>blog_test.py</code>, for tests related to the
"blogs" of our application.</p>
<p>However, <strong>it is better if you name them using this
pattern</strong>:&nbsp;<code>test_*.py</code></p>
<p>For example, <code>test_blog.py</code>.</p>
<p>When I first recorded this course, it was very easy to tell the
test runner to run tests using <code>*_test.py</code>, and I felt
it was more readable that way. Nowadays, it is slightly more
difficult to do so, so <strong>it's better if you follow</strong>
<code>test_*.py</code>.</p>
<p><br /></p>
<p>#58: Writing our first test</p>
<ul>
<li>a blog usually has a title and content</li>
<ul>
<li>often much more, like metadata, author, dates, tags etc.</li>
</ul>
<li>we stick to a most basic representation</li>
<li>our post is going to be a class, containing title and
content</li>
<ul>
<li>the blog is containing multiple posts</li>
</ul>
<li>the blog is going to have the author</li>
<li>write a post class which has a two properties</li>
<ul>
<li>a title and content</li>
</ul>
<li>after that</li>
<li>in the tests folder we create a new python package</li>
<ul>
<li>and name it unit</li>
</ul>
<li>any methods, functions, classes you want to test, you gonna put
them in the unit tests</li>
<li>so accoding to #57 we will name our test test_post.py and put
it in the unit folder (it belongs to the unit package created)</li>
<li>the Unit Test classes always have to inherit from a particular
other class, which is TestCase</li>
</ul>
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">from </span>unittest <span style=
"color:#cc7832;">import </span>TestCase</pre>
<ul>
<ul>
<li>we also import our Post, so...<br />
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">from </span>post <span style=
"color:#cc7832;">import </span>Post</pre></li>
</ul>
<li>our complete first unit test class</li>
<ul>
<li>
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style=
"color:#cc7832;">class </span>TestPost(TestCase):<br />    <span style="color:#cc7832;">def </span><span style="color:#ffc66d;">test_create_post</span>(<span style="color:#94558d;">self</span>):<br />        p = Post(<span style="color:#6a8759;">'Test'</span><span style="color:#cc7832;">, </span><span style="color:#6a8759;">'Test content'</span>)<br /><br />        <span style="color:#94558d;">self</span>.assertEqual(<span style="color:#6a8759;">'Test'</span><span style="color:#cc7832;">, </span>p.title)<br />        <span style="color:#94558d;">self</span>.assertEqual(<span style="color:#6a8759;">'Test content'</span><span style="color:#cc7832;">, </span>p.content)<br /><br /></pre></li>
</ul>
<li>similar to other unit testing frameworks in C# like NUnit</li>
<li>Tipp for the project:</li>
<ul>
<li>keep the file structure as simple as possible</li>
<li>to make it easy on Pycharm</li>
<li>to determine what is running and how things are working</li>
</ul>
<li><span style="background-color: rgb(255, 255, 0);">to run a unit
test</span>, rightclick in Pycharm on the file</li>
<ul>
<li><span style="background-color: rgb(255, 255, 0);">and select
Run Unittests for test_post.py</span></li>
<li>or in my case: "Run Python Tests in test..."</li>
</ul>
<li>so assert check in Python using TestCase is like this:</li>
<ul>
<li><span style="background-color: rgb(255, 255, 0);"><font face=
"andale mono">self.assertEqual('Test',
p.title)</font></span><br /></li>
</ul>
<li>units tests</li>
<ul>
<li>for security, when you change something you have something
reminding you how your system should work</li>
<li>in this easy example the unit tests is showing what the title
and content should be, up top</li>
</ul>
</ul>
<div><span style="background-color: rgb(255, 255, 0);">#59: Testing
dictionary equivalence</span></div>
<div>
<ul>
<li>let's say our posts should be save to some database</li>
<li>so we have to be able to display them as a dicitonary</li>
<ul>
<li>maybe they are beeing sent through a REST API</li>
<li>and we may send some JSON of this post</li>
</ul>
<li>so we want a method now, which sends JSON which represents the
blog post</li>
<ul>
<li>we could add a date in the JSON, if we needed it</li>
</ul>
<li>so in our class Post we just define a new method, which returns
the JSON format</li>
<li>in our test class, we create a new method to test this JSON
method</li>
<ul>
<li>it ends up as</li>
<ul>
<li>
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">def </span><span style=
"color:#ffc66d;">test_json</span>(<span style=
"color:#94558d;">self</span>):<br />    p = Post(<span style=
"color:#6a8759;">'Test'</span><span style=
"color:#cc7832;">, </span><span style=
"color:#6a8759;">'Test content'</span>)<br /><br />    <span style=
"color:#94558d;">self</span>.assertDictEqual({<span style=
"color:#6a8759;">'title'</span>: p.title<span style=
"color:#cc7832;">, </span><span style=
"color:#6a8759;">'content'</span>: p.content}<span style=
"color:#cc7832;">, </span>p.json())<br /></pre></li>
</ul>
<li>Note:</li>
<ul>
<li><span style=
"background-color: rgb(255, 255, 0);">self.assetDictEqual is useful
to test values of a dictionary!</span></li>
</ul>
</ul>
<li>you would be using these methods all the time when working with
REST API and web development</li>
<li>Note:</li>
<ul>
<li><span style="background-color: rgb(0, 255, 255);">you could add
extras to the Post class,</span></li>
<li>e.g. the __repr__ method</li>
<li>or other methods to practice and test these methods</li>
</ul>
</ul>
</div>
<p>#60: Writing blog tests and PyCharm run configurations</p>
<ul>
<li>new blog class with 3 properties: title, author, posts</li>
<li>we also implement the json method in blog</li>
<ul>
<li>the interesting part, is where we use the post json method from
before<br /></li>
</ul>
</ul>
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style=
"color:#6a8759;">'posts'</span>: [post.json() <span style=
"color:#cc7832;">for </span>post <span style=
"color:#cc7832;">in </span><span style=
"color:#94558d;">self</span>.posts]<span style=
"color:#cc7832;">,</span></pre>
<ul>
<li>this however relies on json method of posts class working
correctly</li>
<ul>
<li>is this really alright?!</li>
</ul>
<li>to run the test, best to simply only run the new test to avoid
confusion, to do that:</li>
<ul>
<li>just rightclick the test file you want to test, and click on
Start Unit Test or similar</li>
</ul>
<li>to run several unit tests in a folder, if you didn't name your
test files properly:</li>
<ul>
<li>you can change the test configuration settings, at the top
right, where the is the play icon on the left:<br />
<en-media type="image/png" hash="abf90bf1774959df3e66e98fbb8bdf97"></en-media><br />
</li>
<li>we can change the pattern, so when the test files would be in
the pattern *_test.py, we could use that as pattern!</li>
<li>but when we name our files: "test_&lt;class&gt;.py" it should
be alright</li>
</ul>
<li>you can implement __repr__, create_post methods and implement
tests for them</li>
</ul>
<div>#61: The repr method and intro into TDD</div>
<div>
<ul>
<li><span style="background-color: rgb(255, 0, 255);">test driven
development</span></li>
<ul>
<li><span style="background-color: rgb(255, 255, 0);">think of what
you were going to implement, before you going to implement
it</span></li>
</ul>
<li><span style="background-color: rgb(255, 255, 0);">repr
method</span></li>
<ul>
<li><span style="background-color: rgb(255, 255, 0);">should return
a string representation of our blog</span></li>
<li><span style="background-color: rgb(255, 255, 0);">representing
the blog when we are debugging</span></li>
</ul>
<li>before we implement the __repr__ method, we can actually start
with the test first</li>
<li>aim for testing all the cases, that you know, may arise</li>
<li>TDD is not about thinking of all possible permuations and then
writing test to them all,</li>
<ul>
<li>it is just about testing one permutation and writing the
simplest, most dumb piece of code that will fulfill</li>
<li>and then step by step extend the permutations and extend the
code, extend the permutations, the code, etc.</li>
</ul>
<li>remember to always keep rerunning tests, even after slight
changes</li>
</ul>
<div>#62: Integration tests and finishing the blog</div>
</div>
<div>
<ul>
<li>you can go ahead and use TDD to implement the remaining
methods</li>
<ul>
<li>(Create_post, to_json)</li>
<li><span style="background-color: rgb(255, 255, 0);">spirit of
TDD, write some test for the smallest possible thing</span></li>
<li><span style="background-color: rgb(255, 255, 0);">then write
some code to fulfill it, and then rinse and repeat to extend,
improve, refactor both</span></li>
</ul>
<li>now we will skip doing TDD</li>
<li>about create_post</li>
<ul>
<li>how should it create a post?</li>
<li>should it return a post object or append a new post to the post
list of the class?</li>
<ul>
<li>probably rather the later</li>
<li>we should update the blog list via that method</li>
</ul>
</ul>
<li>so for create_post we will have code like this:</li>
<ul>
<li>
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">def </span><span style=
"color:#ffc66d;">create_post</span>(<span style=
"color:#94558d;">self</span><span style=
"color:#cc7832;">, </span>title<span style=
"color:#cc7832;">, </span>content):<br />    <span style=
"color:#94558d;">self</span>.posts.append(Post(title<span style=
"color:#cc7832;">, </span>content))</pre></li>
<li>our initial method to test it, ends up as:</li>
<ul>
<li>
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">def </span><span style=
"color:#ffc66d;">test_create_post_in_blog</span>(<span style=
"color:#94558d;">self</span>):<br />    b = Blog(<span style=
"color:#6a8759;">'Test'</span><span style=
"color:#cc7832;">, </span><span style=
"color:#6a8759;">'Test Author'</span>)<br />    b.create_post(<span style="color:#6a8759;">'Test Post'</span><span style="color:#cc7832;">, </span><span style="color:#6a8759;">'Test Content'</span>)<br /><br />    <span style="color:#94558d;">self</span>.assertEqual(<span style="color:#8888c6;">len</span>(b.posts)<span style="color:#cc7832;">, </span><span style="color:#6897bb;">1</span>)<br />    <span style="color:#94558d;">self</span>.assertEqual(b.posts[<span style="color:#6897bb;">0</span>].title<span style="color:#cc7832;">, </span><span style="color:#6a8759;">'Title Post'</span>)<br />    <span style="color:#94558d;">self</span>.assertEqual(b.posts[<span style="color:#6897bb;">0</span>].content<span style="color:#cc7832;">, </span><span style="color:#6a8759;">'Title Content'</span>)</pre></li>
</ul>
<li><span style="background-color: rgb(255, 255, 0);">Note there is
an important issue with that</span>:</li>
<ul>
<li>it is not a unit test, since it depends on Posts to run
this&nbsp;</li>
<li>it is not, since it does not test one single thing</li>
<li>the test is now testing two separate units</li>
</ul>
</ul>
<li><span style="background-color: rgb(255, 255, 0);">so instead of
doing it like this, we create a folder for integration
tests!</span></li>
</ul>
<div><span style="background-color: rgb(255, 255, 0);">#63:
Mocking, patching, and system tests</span></div>
</div>
<div>
<ul>
<li>we will bring our blog and posts together</li>
<li>and create a basic interface, so that the user can create blogs
and posts and read them and so on</li>
<li>so we create the files:</li>
<ul>
<li>app.py</li>
</ul>
<li>so in app.py nothing special</li>
<ul>
<li>quite simple console application</li>
<li>with some menu options</li>
</ul>
<li>the app.py is essentially a view on our entire system</li>
<ul>
<li>everything the user sees, everything the user interacts
with</li>
<li>a larger kind of integration test</li>
</ul>
<li>for app.py we create a own package for testing called
"system"</li>
<ul>
<li>for our system tests</li>
<li>a system test is a test, which tests throughout your whole
system</li>
</ul>
<li>what methods should there be in app.py?</li>
<ul>
<li>menu() to show the menu options</li>
</ul>
<li>we notice a new issue:</li>
<ul>
<li>how to actually test printed output the console, which is not
replicated in a object or returned?</li>
<li>if we returned a value, we could just check the returned
value</li>
<li>we cannot extract the value from the function directly</li>
</ul>
<li>we should have a program, that reads what is printed to the
console</li>
<ul>
<li>for that we use path() which is in the mock library</li>
<li>mock is an additional package, might be required to install
it</li>
</ul>
<li>patch()</li>
<ul>
<li>lets us patch something&nbsp;</li>
<li>look at it as an outsider</li>
<li>and lets us potentially change</li>
<li>so we can patch the print function, so that it does something
else</li>
</ul>
<li>we import the patch:<br />
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">try</span>:<br />    <span style=
"color:#cc7832;">from </span>unittest.mock <span style=
"color:#cc7832;">import </span>patch<br /><span style=
"color:#cc7832;">except </span><span style=
"color:#8888c6;">ImportError</span>:<br />    <span style=
"color:#cc7832;">from </span>mock <span style=
"color:#cc7832;">import </span>patch</pre></li>
<li>so for our test on print_blogs() we could write the test method
like this:<br />
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">def </span><span style=
"color:#ffc66d;">test_print_blogs</span>(<span style=
"color:#94558d;">self</span>):

    <span style="font-size: 9.8pt;">blog = Blog(</span><span style=
"font-size: 9.8pt; color: rgb(106, 135, 89);">'Test'</span><span style="font-size: 9.8pt; color: rgb(204, 120, 50);">, </span><span style="font-size: 9.8pt; color: rgb(106, 135, 89);">'Test Author'</span><span style="font-size: 9.8pt;">)</span></pre>
<pre style=
"font-family: 'JetBrains Mono', monospace; font-size: 9.8pt;">    app.blogs = {<span style="color:#6a8759;">'Test'</span>: blog}</pre>
<pre>    <span style=
"color:#cc7832;">with </span>patch(<span style="color:#6a8759;">'builtins.print'</span>) <span style="color:#cc7832;">as </span>mocked_print:<br />        app.print_blogs()<br />        mocked_print.assert_called_with(<span style="color:#6a8759;">'- Test by Test Author (0 posts)'</span>)</pre></li>
<li><span style="background-color: rgb(255, 255, 0);">so we patch
the print with mocked_print and then use mocked_print<br />
to asset that the output sent to print was correct</span></li>
<li>Note about the print function:</li>
<ul>
<li>since it is builtin function of Python, we can assume it works
correctly; it does not matter that our program relies on it; and we
mustn't test it</li>
<li>when you use patch to patch the builtin print function, we
don't use the builtin print</li>
</ul>
<li>Note:</li>
<ul>
<li>when our tests have shared parts of initial setup, we can
implement the setUp method in our TestCase to do the first
initialiazation steps, e.g. for our example we could do:<br />
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">def </span><span style=
"color:#ffc66d;">setUp</span>(<span style=
"color:#94558d;">self</span>):<br />    blog = Blog(<span style=
"color:#6a8759;">'Test'</span><span style=
"color:#cc7832;">, </span><span style=
"color:#6a8759;">'Test Author'</span>)<br />    app.blogs = {<span style="color:#6a8759;">'Test'</span>: blog}</pre></li>
<ul>
<li>then we wouldn't need those two lines in our test methods!</li>
</ul>
</ul>
</ul>
<div><br /></div>
<div>#64: Patching the input method and returning values</div>
<div>
<ul>
<li>implemented alongside this section:</li>
<ul>
<li>print_blogs()</li>
<li>show_menu() with input(MENU_PROMPT)</li>
<li>the tests of that in test_app.py - first alone</li>
</ul>
<li>so first impelement test&nbsp;<span style=
"color: rgb(255, 198, 109); font-family: 'JetBrains Mono', monospace; font-size: 9.8pt; background-color: rgb(43, 43, 43);">test_menu_calls_print_blogs</span>&nbsp;myself<br />
</li>
<ul>
<li>&nbsp; <span style=
"background-color: rgb(255, 255, 0);">issues: it asks for an input
during the test; what to do about it?</span></li>
<ul>
<li><span style="background-color: rgb(255, 255, 0);">we patch the
builtins.input method!</span><br />
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
<span style="color:#cc7832;">with </span>patch(<span style=
"color:#6a8759;">'builtins.input'</span>) <span style=
"color:#cc7832;">as </span>mocked_input:</pre></li>
<li>we then can give input instructions, example:<br />
<pre style=
"background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.8pt;">
mocked_input.side_effect = (<span style=
"color:#6a8759;">'l'</span><span style=
"color:#cc7832;">, </span><span style=
"color:#6a8759;">'q'</span>)</pre></li>
</ul>
<li><br /></li>
</ul>
</ul>
</div>
</div>
</div>
</div>
</en-note>]]></Content>
        <ContentLength>19528</ContentLength>
        <Created>1667649317992</Created>
        <Updated>1667763084031</Updated>
        <Active>true</Active>
        <UpdateSequenceNumber>0</UpdateSequenceNumber>
        <NotebookGuid>0c5eda10-b64f-4bd0-b706-8f014d815707</NotebookGuid>
        <NoteResource>
            <Guid>1790</Guid>
            <NoteGuid>52741ade-dc5e-4a72-8f77-6ceede2a9760</NoteGuid>
            <Data>
                <Body></Body>
                <BodyHash>abf90bf1774959df3e66e98fbb8bdf97</BodyHash>
                <Size>15093</Size>
            </Data>
            <Mime>image/png</Mime>
            <Width>0</Width>
            <Height>0</Height>
            <Duration>0</Duration>
            <Active>true</Active>
            <ResourceAttributes>
                <Attachment>false</Attachment>
            </ResourceAttributes>
        </NoteResource>
        <Attributes>
            <Author>Wolfgang</Author>
        </Attributes>
        <Dirty>true</Dirty>
    </Note>
</nixnote-export>
